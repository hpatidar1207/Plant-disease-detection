# -*- coding: utf-8 -*-
"""Himanshu_Tomato_Disease_FPR_Final_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12wPk9IGlL4uCu6OTUhFnNDSzoGWKocZd
"""

import warnings
warnings.filterwarnings("ignore")
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.rcParams['axes.labelsize'] = 15
matplotlib.rcParams['xtick.labelsize'] = 15
matplotlib.rcParams['ytick.labelsize'] = 15
matplotlib.rcParams['text.color'] = '#FF1493'
import plotly.express as px
import plotly.figure_factory as ff
import seaborn as sns
import cv2
import os
from PIL import Image
from tqdm import tqdm
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
#from tensorflow.keras.utils.np_utils import to_categorical
from tensorflow import keras
from tensorflow.keras.models import Model,Sequential, load_model
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization, AveragePooling2D, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras.applications import DenseNet201
from tensorflow.keras.utils import to_categorical
from tensorflow.keras import Input
from tensorflow.keras.applications import ResNet152V2
from tensorflow.keras.applications import VGG16

from sklearn.metrics import precision_score, recall_score, f1_score, classification_report,accuracy_score



from google.colab import drive
drive.mount('/content/drive')
os.listdir('/content/drive/MyDrive/Plant_Disease_Detection/Tomato_Leaves')

data_dir = '/content/drive/MyDrive/Plant_Disease_Detection/Tomato_Leaves'
train_dir = os.path.join(data_dir,"train/")
test_dir = os.path.join(data_dir,"val/")
labels=['Tomato___Septoria_leaf_spot',
 'Tomato___Bacterial_spot',
 'Tomato___healthy',
 'Tomato___Tomato_Yellow_Leaf_Curl_Virus',
 'Tomato___Late_blight',
 'Tomato___Early_blight',
 'Tomato___Tomato_mosaic_virus',
 'Tomato___Target_Spot',
 'Tomato___Leaf_Mold',
 'Tomato___Spider_mites Two-spotted_spider_mite']
numclass=len(labels)
print("Total Data Labels: ",numclass)



dirs=os.listdir(data_dir)
tot=0
for i in dirs:
    presdir=os.path.join(data_dir ,i)
    print("{}  contains {} databases".format(i,len(os.listdir(presdir))))
    tot+=len(os.listdir(presdir))

train_data = []
for defects_id, sp in enumerate(labels):
    for file in os.listdir(os.path.join(train_dir, sp)):
        train_data.append(['{}/{}'.format(sp, file), defects_id, sp])

train = pd.DataFrame(train_data, columns=['File', 'DiseaseID','Disease Type'])
train.tail()

train = train.sample(frac=1, random_state=42)
train.index = np.arange(len(train)) # Reset indices
train.head()

val_data = []
for defects_id, sp in enumerate(labels):
    for file in os.listdir(os.path.join(test_dir, sp)):
        val_data.append(['{}/{}'.format(sp, file), defects_id, sp])

val = pd.DataFrame(val_data, columns=['File', 'DiseaseID','Disease Type'])
val.tail()

val = val.sample(frac=1, random_state=42)
val.index = np.arange(len(val)) # Reset indices
val.head()

dirs=os.listdir(train_dir)
labels=[]
cnts=[]
tot=0
for i in dirs:
    presdir=os.path.join(train_dir,i)
    print("Label Type: {} => Total Images: {} image files.".format(i,len(os.listdir(presdir))))
    tot+=len(os.listdir(presdir))
    labels.append(i)
    cnts.append(len(os.listdir(presdir)))
print("\nTotal images in the train database: ",tot)

dirs=os.listdir(test_dir)
labels=[]
cnts=[]
tot=0
for i in dirs:
    presdir=os.path.join(test_dir,i)
    print("Label Type: {} => Total Images: {} image files.".format(i,len(os.listdir(presdir))))
    tot+=len(os.listdir(presdir))
    labels.append(i)
    cnts.append(len(os.listdir(presdir)))
print("\nTotal images in the test database: ",tot)

diseasetype=train['Disease Type'].value_counts().index.tolist()
print(diseasetype)
cnt=train['Disease Type'].value_counts().tolist()
dssdf=pd.DataFrame({"Type":diseasetype,"Count":cnt})
fig = px.pie(dssdf, names="Type", values="Count",
             title="Count of Labels in Databse",height=900,width=900)
fig.update_layout(
        font=dict(
            family="Times New Roman, Bold",
            size=20,
            color="dodgerblue"
        )
    )
fig.show()

SEED = 42
train = train.sample(frac=1, random_state=SEED)
train.index = np.arange(len(train)) # Reset indices
train.head()

allacc,allloss=[],[]

datagen = keras.preprocessing.image.ImageDataGenerator(rescale=1/255, validation_split=0.3)
train = datagen.flow_from_directory(train_dir, seed=123, subset='training')
val = datagen.flow_from_directory(test_dir, seed=123, subset='validation')
datagen2 = keras.preprocessing.image.ImageDataGenerator(rescale=1/255)

test = datagen2.flow_from_directory(test_dir)

def design_resnet152():
    res152_bsemodel = ResNet152V2(input_shape=(256,256,3), include_top=False)

    for layers in res152_bsemodel.layers[:140]:
        layers.trainable = False
    for layers in res152_bsemodel.layers[140:]:
        layers.trainable = True


    r152lyr = res152_bsemodel.output
    r152lyr = GlobalAveragePooling2D()(r152lyr)
    r152lyr = Dense(1000, activation='relu')(r152lyr)
    pred = Dense(10, activation='softmax')(r152lyr)

    modelres152 = Model(inputs=res152_bsemodel.input, outputs=pred)
    return modelres152

modelres152 = design_resnet152()
modelres152.summary()
modelres152.compile(loss='categorical_crossentropy', optimizer='sgd', metrics='accuracy')
histres152=modelres152.fit(train, batch_size=80, epochs=5, validation_data=val)

res152hist=histres152.history

train_acc = res152hist['accuracy']
test_acc = res152hist['val_accuracy']
train_loss = res152hist['loss']
test_loss = res152hist['val_loss']
res152df=pd.DataFrame({
    "Epoch":[i+1 for i in range(5)],
    "Training Loss":train_loss,
    "Test Loss":test_loss,
    "Training Accuracy":train_acc,
    "Test Accuracy":test_acc
})
res152df.to_csv("model_resnet152v2.csv")
res152df

colres=["#FF0000","#FF5F1F"]
res152df.iloc[:,3:].plot(kind="line",figsize=(12,7),color=colres)
plt.title("Comparison of Accuracies ResNet152",fontsize=20,color=colres[1])
plt.xlabel("Epoch",fontsize=20,color=colres[1])
plt.ylabel("Model Accuracies",fontsize=20,color=colres[1])
plt.grid()
plt.show()

res152df.iloc[:,1:3].plot(kind="line",figsize=(12,7),color=colres)
plt.title("Comparison of Losses for ResNet152",fontsize=20,color=colres[1])
plt.xlabel("Epoch",fontsize=20,color=colres[1])
plt.ylabel("Model Loss",fontsize=20,color=colres[1])
plt.grid()
plt.show()

final_lossres152, final_accres152 = modelres152.evaluate(test)
print('Final Loss(ResNet152): {}\n Final Accuracy(ResNet152): {}%'.format(round(final_lossres152,4), round(final_accres152,4)*100))
allacc.append(round(final_accres152,4)*100)
allloss.append(round(final_lossres152,4))

classes = os.listdir(data_dir+"/"+"val/")

plt.figure(figsize=(18,28))

for i in enumerate(classes):
    pic = os.listdir(data_dir+"/"+"val/"+i[1])
    pic = pic[np.random.randint(len(pic)-1)]
    image = Image.open(data_dir+"/"+"val/"+i[1]+'/'+pic)
    image = np.asarray(image)

    pred = np.argmax(modelres152.predict(image.reshape(-1,256,256,3)/255))
    for j in list(enumerate(list(test.class_indices.keys()))):
        if pred == j[0]:
            prediction =  j[1]

    plt.subplot(5,2,i[0]+1)
    plt.title('Original: {} \n Predicted: {}'.format(i[1], prediction))
    plt.imshow(image)
plt.show()

def design_vgg16():
    v16_bsemodel = VGG16(input_shape=(256,256,3), include_top=False)

    for layers in v16_bsemodel.layers[:140]:
        layers.trainable = False
    for layers in v16_bsemodel.layers[140:]:
        layers.trainable = True


    v16lyr = v16_bsemodel.output
    v16lyr = GlobalAveragePooling2D()(v16lyr)
    v16lyr = Dense(1000, activation='relu')(v16lyr)
    pred = Dense(10, activation='softmax')(v16lyr)

    modelv16 = Model(inputs=v16_bsemodel.input, outputs=pred)
    return modelv16

modelv16 = design_vgg16()
modelv16.summary()
modelv16.compile(loss='categorical_crossentropy', optimizer='sgd', metrics='accuracy')
histVGG16=modelv16.fit(train, batch_size=80, epochs=5, validation_data=val)

v16hist=histVGG16.history

train_acc = v16hist['accuracy']
test_acc = v16hist['val_accuracy']
train_loss = v16hist['loss']
test_loss = v16hist['val_loss']
vgg16df=pd.DataFrame({
    "Epoch":[i+1 for i in range(5)],
    "Training Loss":train_loss,
    "Test Loss":test_loss,
    "Training Accuracy":train_acc,
    "Test Accuracy":test_acc
})
vgg16df.to_csv("model_vgg16.csv")
vgg16df

colv16=["#FF0000","#FF5F1F"]
vgg16df.iloc[:,3:].plot(kind="line",figsize=(12,7),color=colv16)
plt.title("Comparison of Accuracies VGG16",fontsize=20,color=colv16[1])
plt.xlabel("Epoch",fontsize=20,color=colv16[1])
plt.ylabel("Model Accuracies",fontsize=20,color=colv16[1])
plt.grid()
plt.show()

vgg16df.iloc[:,1:3].plot(kind="line",figsize=(12,7),color=colv16)
plt.title("Comparison of Losses for VGG16",fontsize=20,color=colv16[1])
plt.xlabel("Epoch",fontsize=20,color=colv16[1])
plt.ylabel("Model Loss",fontsize=20,color=colv16[1])
plt.grid()
plt.show()

final_lossvgg16, final_accvgg16 = modelv16.evaluate(test)
print('Final Loss(ResNet50): {}\nFinal Accuracy(VGG16): {}%'.format(round(final_lossvgg16,4), round(final_accvgg16,4)*100))
allacc.append(round(final_accvgg16,4)*100)
allloss.append(round(final_lossvgg16,4))

classes = os.listdir(data_dir+"/"+"val/")

plt.figure(figsize=(18,28))

for i in enumerate(classes):
    pic = os.listdir(data_dir+"/"+"val/"+i[1])
    pic = pic[np.random.randint(len(pic)-1)]
    image = Image.open(data_dir+"/"+"val/"+i[1]+'/'+pic)
    image = np.asarray(image)

    pred = np.argmax(modelv16.predict(image.reshape(-1,256,256,3)/255))
    for j in list(enumerate(list(test.class_indices.keys()))):
        if pred == j[0]:
            prediction =  j[1]

    plt.subplot(5,2,i[0]+1)
    plt.title('Original: {} \n Predicted: {}'.format(i[1], prediction))
    plt.imshow(image)
plt.show()

def design_den201():
    d201_bsemodel = DenseNet201(input_shape=(256,256,3), include_top=False)

    for layers in d201_bsemodel.layers[:140]:
        layers.trainable = False
    for layers in d201_bsemodel.layers[140:]:
        layers.trainable = True


    D201lyr = d201_bsemodel.output
    D201lyr = GlobalAveragePooling2D()(D201lyr)
    D201lyr = Dense(1000, activation='relu')(D201lyr)
    pred = Dense(10, activation='softmax')(D201lyr)

    modelD201 = Model(inputs=d201_bsemodel.input, outputs=pred)
    return modelD201

modelD201 = design_den201()
modelD201.summary()
modelD201.compile(loss='categorical_crossentropy', optimizer='sgd', metrics='accuracy')
histden201=modelD201.fit(train, batch_size=80, epochs=5, validation_data=val)

D201hist=histden201.history

train_acc = D201hist['accuracy']
test_acc = D201hist['val_accuracy']
train_loss = D201hist['loss']
test_loss = D201hist['val_loss']
den201df=pd.DataFrame({
    "Epoch":[i+1 for i in range(5)],
    "Training Loss":train_loss,
    "Test Loss":test_loss,
    "Training Accuracy":train_acc,
    "Test Accuracy":test_acc
})
den201df.to_csv("model_den201.csv")
den201df

colD201=["#FF0000","#FF5F1F"]
den201df.iloc[:,3:].plot(kind="line",figsize=(12,7),color=colD201)
plt.title("Comparison of Accuracies den201",fontsize=20,color=colD201[1])
plt.xlabel("Epoch",fontsize=20,color=colD201[1])
plt.ylabel("Model Accuracies",fontsize=20,color=colD201[1])
plt.grid()
plt.show()

den201df.iloc[:,1:3].plot(kind="line",figsize=(12,7),color=colD201)
plt.title("Comparison of Losses for den201",fontsize=20,color=colD201[1])
plt.xlabel("Epoch",fontsize=20,color=colD201[1])
plt.ylabel("Model Loss",fontsize=20,color=colD201[1])
plt.grid()
plt.show()

final_lossden, final_accden = modelD201.evaluate(test)
print('Final Loss(DenseNet121): {}\nFinal Accuracy(DenseNet201): {}%'.format(round(final_lossden,4), round(final_accden,4)*100))
allacc.append(round(final_accden,4)*100)
allloss.append(round(final_lossden,4))

classes = os.listdir(data_dir+"/"+"val/")

plt.figure(figsize=(18,28))

for i in enumerate(classes):
    pic = os.listdir(data_dir+"/"+"val/"+i[1])
    pic = pic[np.random.randint(len(pic)-1)]
    image = Image.open(data_dir+"/"+"val/"+i[1]+'/'+pic)
    image = np.asarray(image)

    pred = np.argmax(modelD201.predict(image.reshape(-1,256,256,3)/255))
    for j in list(enumerate(list(test.class_indices.keys()))):
        if pred == j[0]:
            prediction =  j[1]

    plt.subplot(5,2,i[0]+1)
    plt.title('Original: {} \n Predicted: {}'.format(i[1], prediction))
    plt.imshow(image)
plt.show()

models=['ResNet152','VGG16','DenseNet201']
accdf=pd.DataFrame({"Model":models,"Accuracies":allacc,"Loss":allloss})
accdf=accdf.sort_values(by="Accuracies",ascending=False)
accdf
for i in accdf.columns.tolist()[1:]:
    accout=accdf.sort_values(by=i,ascending=False)
    fig = px.bar(accout, y=i, x="Model",color="Model",text=i,title="Comparison of {}".format(i),width=700)
    fig.update_layout(
        font=dict(
            family="Times New Roman, Bold",
            size=20,
            color="black"
        )
    )
    fig.show()

accdf

